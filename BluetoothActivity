package com.example.ravenscheller.myapplication;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.Set;

/**
 * Created by oem on 06.11.17.
 * @author Lukasz Rojek
 */

public class BluetoothActivity extends AppCompatActivity {
    public static final int MSG_OK = 0x10;
    public static final int MSG_WARNING = 0x20;
    public static final int MSG_ERROR = 0x30;

    private ArrayAdapter<String> boundedDevicesAdapter;
    private ArrayAdapter<String> foundedDevicesAdapter;

    private final ArrayList<String> boundedDevicesList = new ArrayList<>();
    private final ArrayList<String> foundedDevicesList = new ArrayList<>();

    private TextView tvState, tvBoundedDevicesHeader, tvFoundedDevicesHeader;
    private Button btScan, btTurnBtOn;

    public final static String MAC_ADDRESS = "F4-06-69-27-63-51";

    protected final BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

    /* Der BroadcastReceiver definiert das weitere Vorgehen beim reigistierten Ereignis.
     *
     */
    private final BroadcastReceiver bluetoothReceiver = new BroadcastReceiver(){

        @Override
        public void onReceive(Context context, Intent intent) {
            // Die Art des Ereignises
            String action = intent.getAction();
            if(BluetoothAdapter.ACTION_DISCOVERY_STARTED.equals(action)){
                Log.i("MySensorViewer","Discovering Started.");
                // Inahlte der Liste der gefundenen Bluetooth-Geräten löschen.
                foundedDevicesList.clear();
                // Änderungen aktualisieren.
                foundedDevicesAdapter.notifyDataSetChanged();
                //setSupportProgressBarIndeterminateVisibility(true);
                setTitle(getString(R.string.title_scanning));
                tvFoundedDevicesHeader.setVisibility(View.VISIBLE);
            }else if(BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)){
                Log.i("MySensorViewer","Discovering Finished.");
                //setSupportProgressBarIndeterminateVisibility(false);
                setTitle(getString(R.string.title_bt));
            }else if(BluetoothDevice.ACTION_FOUND.equals(action)){
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                // Den Namen und die Adresse vom Bluetooth-Gerät feststellen.
                String data = device.getName()+":"+device.getAddress();
                Log.i("MySensorViewer","FOUND: " + data);
                /* Der Bindungsstatus des Bluetooth-Gerätes wird überprüft. Die bereits gekoppelten
                 * Geräte werden ignoriert. Ohne der If-Abfrage wurden sowohl die gekoppelten als auch
                 * neugefundenen Geräte aufgelistet, die in Reichweite des Handys liegen.
                 */
                if(device.getBondState() != BluetoothDevice.BOND_BONDED){
                    // Device in die Liste der gefundenen Geräte hinzufügen.
                    foundedDevicesList.add(data);
                    // Änderungen aktualisieren.
                    foundedDevicesAdapter.notifyDataSetChanged();
                }

            }else if(BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)){
                final int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);
                switch(state){
                    case BluetoothAdapter.STATE_OFF:
                        Log.i("MySensorViewer","Bluetooth  Off.");
                        tvBoundedDevicesHeader.setVisibility(View.GONE);
                        boundedDevicesAdapter.clear();
                        tvFoundedDevicesHeader.setVisibility(View.GONE);
                        foundedDevicesAdapter.clear();
                        invokeAlert(BluetoothActivity.MSG_ERROR,getString(R.string.warning_bt_off));
                        btScan.setVisibility(View.GONE);
                        btTurnBtOn.setVisibility(View.VISIBLE);
                        break;
                    case BluetoothAdapter.STATE_ON:
                        Log.i("MySensorViewer","Bluetooth On.");
                        invokeAlert(BluetoothActivity.MSG_OK,"");
                        btScan.setVisibility(View.VISIBLE);
                        btTurnBtOn.setVisibility(View.GONE);
                        notifyBondedDevices();
                        break;
                }
            }
        }

    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.i("MySensorViewer","On Create Bluetooth Activity");
        //supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
        setTitle(R.string.title_bt);
        setContentView(R.layout.activity_bluetooth);
        /*
         * Wenn eine Sub-Activity (child) aus irgendeinem Grund (z.B. unerwarteter Absturz) beendet wird,
         * so erhält die Haupt-Activity (Parent) eine Antwort in Form vom RESULT_CANCELED-Code.
         */
        setResult(Activity.RESULT_CANCELED);
        /* Der Bluetooth-Adapter muss im Handy vorhanden sein, damit die Activity korrekt funktionieren kann,
         * anderseits wird die Activity automatisch beendet.
         */
        if (bluetoothAdapter == null){
            Log.e("MySensorViewer","No Bluetooth Adapter !");
            finish();
        }

        /* Der Bluetooth-Scanner wird durch das klicken auf den "Suchen"-Button gestartet.
         * Es ist wichtig, dass das vorherige Suchen beendet wird, damit keine mehrfache Prozesse
         * der selben Art im Hintergrund laufen und unnötig den Prozessor belasten.
         * Dieser Button ist nur dann sichbar, wenn der Bluetooth-Adapter aktiv ist.
         */
        btScan = (Button) findViewById(R.id.bluetooth_scan);
        btScan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // das vorherige Suchen wird beendet.
                stopDiscovery();
                assert bluetoothAdapter != null;
                // neues Suchen wird gestartet.
                boolean discovery = bluetoothAdapter.startDiscovery();
                if(discovery)
                    Log.i("MySensorViewer","Discovering Started");
                else
                    Log.i("MySensorViewer","Starting Discovering Failed");
            }
        });

        /* Der Bluetooth-Adapter muss aktiv sein, damit die bereits gekoppelten Geräte
         * angezeigt werden können. Dieser Button ist nur dann sichtbar wenn der Bluetooth-Adapter
         * nicht aktiv ist.
         */
        btTurnBtOn = (Button) findViewById(R.id.bluetooth_turn_on);
        btTurnBtOn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                assert bluetoothAdapter != null;
                if (!bluetoothAdapter.isEnabled()) {
                    boolean enabled = bluetoothAdapter.enable();
                    if(enabled)
                        Log.i("MySensorViewer","Bluetooth Adapter Enabled");
                    else
                        Log.i("MySensorViewer","Enabling Bluetooth Adapter Failed");
                }
            }
        });

        /* Ein Broadcast-Receiver ermöglicht eine Kommunikation zwischen dem Android-System und den
         * anderen Applikationen. Ein Broadcast wird dann gesendet, wenn ein Ereignis zustande kommt.
         * Beispielsweise, das Android-System sendet ein Broadcast, wenn das Gerät an Strom angeschlossen
         * wurde, oder wenn der Bluetooth-Adapter seinen Status änderte. Damit die Bluetooth-Activity nur
         * über die Bluetooth-Ereignisse informiert wird, muss ein Intent-Filter zusammen mit dem Broadcast-Receiver
         * registriert werden.
         */
        registerReceiver(bluetoothReceiver,new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_STARTED));
        registerReceiver(bluetoothReceiver,new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED));
        registerReceiver(bluetoothReceiver,new IntentFilter(BluetoothDevice.ACTION_FOUND));
        registerReceiver(bluetoothReceiver,new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));

        /* Die gefundenen und gekoppelten Bluetooth-Geräte werden jeweils in einem ListView-Objekt aufgelistet.
         * Ein ListView-Objekt besteht weiterhin aus zwei weiteren Objekten: ArrayAdapter und ArrayList.
         * Ein ArrayAdapter ist die Schnittstelle zwischen dem Datencontainer (ArrayList) und der
         * graphischen Darstellung (ListView). Somit können die einzelnen Elemente aus dem ArrayList
         * in das ListView übertragen werden.
         */
        ListView lvBoundedDevices = (ListView) findViewById(R.id.bluetooth_list_bounded_devices);
        ListView lvFoundedDevices = (ListView) findViewById(R.id.bluetooth_list_founded_devices);

        lvBoundedDevices.setOnItemClickListener(onItemClickListener);
        lvFoundedDevices.setOnItemClickListener(onItemClickListener);

        boundedDevicesAdapter = new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,boundedDevicesList);
        foundedDevicesAdapter = new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,foundedDevicesList);

        lvBoundedDevices.setAdapter(boundedDevicesAdapter);
        lvFoundedDevices.setAdapter(foundedDevicesAdapter);

        tvState = (TextView) findViewById(R.id.bluetooth_warning);
        tvBoundedDevicesHeader = (TextView) findViewById(R.id.bluetooth_header_bounded_devices);
        tvFoundedDevicesHeader = (TextView) findViewById(R.id.bluetooth_header_founded_devices);

        invokeAlert(BluetoothActivity.MSG_OK,"");
        /*
         * Wenn der Bluetooth-Adapter ausgeschaltet ist, dann soll der Suchen-Button ausgeblendet und
         * der Bluetooth-Aktivieren-Button eingeblendet sein. Die Auflistung der bereits gekoppelten
         * Geräte ist erstmal nicht möglich und soll weggelassen sein.
         */
        assert bluetoothAdapter != null;
        if (!bluetoothAdapter.isEnabled()){
            invokeAlert(BluetoothActivity.MSG_ERROR,getString(R.string.warning_bt_off));
            btTurnBtOn.setVisibility(View.VISIBLE);
            btScan.setVisibility(View.GONE);
            return;
        }
        notifyBondedDevices();
    }

    private void stopDiscovery(){
        if (bluetoothAdapter.isDiscovering()) {
            boolean discovery = bluetoothAdapter.cancelDiscovery();
            if(discovery)
                Log.i("MySensorViewer","Discovering Canceled");
            else
                Log.i("MySensorViewer","Canceling Discovering Failed");
        }
    }

    /* Die invokeAlert-Methode informiert den Benutzer mittels des TextView-Objektes über die Warnungen und Fehler.
     * Das TextView-Objekt ist standardmäßig ausgeblendet.
     */
    protected void invokeAlert(int type, String msg){
        if(msg == null) msg = "";
        tvState.setText(msg);
        switch(type){
            case BluetoothActivity.MSG_OK:
            default:
                tvState.setText(msg);
                tvState.setVisibility(View.GONE);
                return;
            case BluetoothActivity.MSG_WARNING:
                tvState.setBackgroundColor(getResources().getColor(android.R.color.holo_orange_dark));
                break;
            case BluetoothActivity.MSG_ERROR:
                tvState.setBackgroundColor(getResources().getColor(android.R.color.holo_red_dark));
                break;
        }
        tvState.setVisibility(View.VISIBLE);
    }

    private AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener(){

        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position,
                                long id) {
            // Den Namen des ausgewählten Elementes auslesen.
            String data = (String) parent.getAdapter().getItem(position);
            // Falls das ausgewählte Element keine MAC-Adresse beinhaltet, soll es ignoriert werden.
            if(data.contains("null")){
                BluetoothActivity.this.invokeAlert(BluetoothActivity.MSG_WARNING,getString(R.string.warning_unknown_device));
                return;
            }
            // Das weitere Suchen anhalten.
            stopDiscovery();
            /* Die Bluetooth-Adresse wird aus dem Namen ausgeschnitten und in das Intent für die MainActivity übergeben.
             * Auch hier könnte ein selbst definierter ArrayAdapter wie beim SensorDataPlotter angewendet werden,
             * um die MAC-Adresse als Parameter vom ArrayList-Objekt auslesen zu können, um das Schneiden zu vermeiden.
             */
            String mac = data.substring(data.length() - 17);
            Log.i("MySensorViewer","SELECTED: " + mac);
            Intent intent = new Intent();
            intent.putExtra(BluetoothActivity.MAC_ADDRESS, mac);
            setResult(Activity.RESULT_OK,intent);
            finish();
        }
    };

    /* Die notifyBondedDevices-Methode listet die gekoppelten Geräte auf.
     *
     */
    private void notifyBondedDevices(){
        Set<BluetoothDevice> boundedDevices = bluetoothAdapter.getBondedDevices();
        if(boundedDevices.size() == 0){
            // Warnung falls bis jetzt keine Geräte gekoppelt wurden.
            Log.i("MySensorViewer","Bonded Devices List Empty !");
            invokeAlert(BluetoothActivity.MSG_WARNING,getString(R.string.warning_no_bounded_devices));
            return;
        }
        /* Der Gerätename und die Bluetooth-Adresse werden aus dem BoundedDevice-Objekt ausgelesen und
         * in das ArrayList-Objekt eingetragen. Es ist wichtig die notifyDataSetChanged-Methode
         * des ArrayAdapter-Objektes aufzurufen, sonst werden die Änderungen in das ListView-Objekt
         * nicht übernommen.
         */
        tvBoundedDevicesHeader.setVisibility(View.VISIBLE);
        for(BluetoothDevice boundedDevice : boundedDevices){
            String data = boundedDevice.getName()+":"+boundedDevice.getAddress();
            Log.w("MySensorViewer", "BOUNDED: " + data);
            boundedDevicesList.add(data);
        }
        boundedDevicesAdapter.notifyDataSetChanged();
    }

    @Override
    protected void onRestart() {
        // TODO Auto-generated method stub
        super.onRestart();
    }

    @Override
    protected void onResume() {
        // TODO Auto-generated method stub
        super.onResume();
    }

    @Override
    protected void onPause() {
        // TODO Auto-generated method stub
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        stopDiscovery();
        unregisterReceiver(bluetoothReceiver);
        Log.i("MySensorViewer","BluetoothActivity Destroyed.");
    }

    @Override
    public void onBackPressed(){
        super.onBackPressed();
        Log.i("MySensorViewer","BluetoothActivity On Back Pressed.");
        overridePendingTransition(android.R.anim.slide_in_left,android.R.anim.slide_out_right);
    }

    @Override
    public void finish(){
        super.finish();
        Log.i("MySensorViewer","BluetoothActivity Finished.");
        overridePendingTransition(android.R.anim.slide_in_left,android.R.anim.slide_out_right);
    }
}
